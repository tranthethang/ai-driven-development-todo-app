name: 🧪 Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏗️ Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'todo-app/package-lock.json'
        
    - name: 📦 Install dependencies
      working-directory: ./todo-app
      run: npm ci --legacy-peer-deps
      
    - name: 🔍 Run ESLint
      working-directory: ./todo-app
      run: npm run lint
      
    - name: 🧪 Run unit tests
      working-directory: ./todo-app
      run: npm test -- --coverage --watchAll=false
      
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./todo-app/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'todo-app/package-lock.json'
        
    - name: 📦 Install dependencies
      working-directory: ./todo-app
      run: npm ci --legacy-peer-deps
      
    - name: ⚡ Run performance tests
      working-directory: ./todo-app
      run: npm test -- --testPathPattern=performance --watchAll=false
      
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'todo-app/package-lock.json'
        
    - name: 📦 Install dependencies
      working-directory: ./todo-app
      run: npm ci --legacy-peer-deps
      
    - name: 🔒 Run security audit
      working-directory: ./todo-app
      run: npm audit --audit-level=moderate
      
  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'todo-app/package-lock.json'
        
    - name: 📦 Install dependencies
      working-directory: ./todo-app
      run: npm ci --legacy-peer-deps
      
    - name: 🔨 Build application
      working-directory: ./todo-app
      run: npm run build
      
  coverage-gate:
    name: Coverage Gate
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'todo-app/package-lock.json'
        
    - name: 📦 Install dependencies
      working-directory: ./todo-app
      run: npm ci --legacy-peer-deps
      
    - name: 📊 Check coverage threshold
      working-directory: ./todo-app
      run: |
        npm test -- --coverage --watchAll=false --coverageReporters=text-summary | tee coverage.txt
        
        # Extract coverage percentages
        STATEMENTS=$(grep "Statements" coverage.txt | awk '{print $3}' | sed 's/%//')
        BRANCHES=$(grep "Branches" coverage.txt | awk '{print $3}' | sed 's/%//')
        FUNCTIONS=$(grep "Functions" coverage.txt | awk '{print $3}' | sed 's/%//')
        LINES=$(grep "Lines" coverage.txt | awk '{print $3}' | sed 's/%//')
        
        echo "Coverage Results:"
        echo "Statements: ${STATEMENTS}%"
        echo "Branches: ${BRANCHES}%"
        echo "Functions: ${FUNCTIONS}%"
        echo "Lines: ${LINES}%"
        
        # Check if coverage meets threshold (90%)
        THRESHOLD=90
        
        if (( $(echo "$STATEMENTS < $THRESHOLD" | bc -l) )); then
          echo "❌ Statements coverage ($STATEMENTS%) is below threshold ($THRESHOLD%)"
          exit 1
        fi
        
        if (( $(echo "$BRANCHES < $THRESHOLD" | bc -l) )); then
          echo "❌ Branches coverage ($BRANCHES%) is below threshold ($THRESHOLD%)"
          exit 1
        fi
        
        if (( $(echo "$FUNCTIONS < $THRESHOLD" | bc -l) )); then
          echo "❌ Functions coverage ($FUNCTIONS%) is below threshold ($THRESHOLD%)"
          exit 1
        fi
        
        if (( $(echo "$LINES < $THRESHOLD" | bc -l) )); then
          echo "❌ Lines coverage ($LINES%) is below threshold ($THRESHOLD%)"
          exit 1
        fi
        
        echo "✅ All coverage thresholds met!"